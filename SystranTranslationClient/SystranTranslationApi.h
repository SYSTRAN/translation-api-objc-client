#import <Foundation/Foundation.h>
#import "SystranBatchCancel.h"
#import "SystranBatchClose.h"
#import "SystranBatchCreate.h"
#import "SystranBatchStatus.h"
#import "SystranTranslationCancel.h"
#import "SystranTranslationFileResponse.h"
#import "SystranTranslationStatus.h"
#import "SystranProfilesResponse.h"
#import "SystranSupportedLanguageResponse.h"
#import "SystranTranslationResponse.h"
#import "SystranObject.h"
#import "SystranApiClient.h"


/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

@interface SystranTranslationApi: NSObject

@property(nonatomic, assign)SystranApiClient *apiClient;

-(instancetype) initWithApiClient:(SystranApiClient *)apiClient;
-(void) addHeader:(NSString*)value forKey:(NSString*)key;
-(unsigned long) requestQueueSize;
+(SystranTranslationApi*) apiWithHeader:(NSString*)headerValue key:(NSString*)key;
+(SystranTranslationApi*) sharedAPI;
///
///
/// Batch Cancel
/// Cancel a translation batch
///
/// @param batchId Batch Identifier
/// @param callback Javascript callback function name for JSONP Support
/// 
///
/// @return SystranBatchCancel*
-(NSNumber*) translationFileBatchCancelPostWithCompletionBlock :(NSString*) batchId 
     callback:(NSString*) callback 
    
    completionHandler: (void (^)(SystranBatchCancel* output, NSError* error))completionBlock;
    


///
///
/// Batch Close
/// Close a translation batch
///
/// @param batchId Batch Identifier
/// @param callback Javascript callback function name for JSONP Support
/// 
///
/// @return SystranBatchClose*
-(NSNumber*) translationFileBatchClosePostWithCompletionBlock :(NSString*) batchId 
     callback:(NSString*) callback 
    
    completionHandler: (void (^)(SystranBatchClose* output, NSError* error))completionBlock;
    


///
///
/// Batch Create
/// Create a new translation batch
///
/// @param callback Javascript callback function name for JSONP Support
/// 
///
/// @return SystranBatchCreate*
-(NSNumber*) translationFileBatchCreatePostWithCompletionBlock :(NSString*) callback 
    
    completionHandler: (void (^)(SystranBatchCreate* output, NSError* error))completionBlock;
    


///
///
/// Batch Status
/// Get the status of a translation batch
///
/// @param batchId Batch Identifier
/// @param callback Javascript callback function name for JSONP Support
/// 
///
/// @return SystranBatchStatus*
-(NSNumber*) translationFileBatchStatusGetWithCompletionBlock :(NSString*) batchId 
     callback:(NSString*) callback 
    
    completionHandler: (void (^)(SystranBatchStatus* output, NSError* error))completionBlock;
    


///
///
/// Translate Cancel
/// Cancel an asynchronous translation request
///
/// @param requestId Request Identifier
/// @param callback Javascript callback function name for JSONP Support
/// 
///
/// @return SystranTranslationCancel*
-(NSNumber*) translationFileCancelPostWithCompletionBlock :(NSString*) requestId 
     callback:(NSString*) callback 
    
    completionHandler: (void (^)(SystranTranslationCancel* output, NSError* error))completionBlock;
    


///
///
/// Translate Result
/// Get the result of an asynchronous translation request\n\nDepending on the initial request, the response can have multiple formats:\n  * The **translated document**, directly, if `source` parameters was not `auto` and `withSource` was not true\n  * A `multipart/mixed` document with the following parts:\n\n    1. **Detected language**, if request was done with `auto` source language\n\n      * Header:\n\n        `part-name: detectedLanguage`\n\n      * Body: JSON document\n        ```\n        {\n          detectedLanguage: \"string\"\n          detectedLanguageConfidence : number\n        }\n        ```\n\n    2. **Source document**, if request was done with `withSource`:\n\n      * Header: `part-name: source`\n      * Body: Source document\n\n    3. **Translated document**\n\n      * Header: `part-name: output`\n\n      * Body: Translated document\n\nAn error can occur in the following cases:\n* Invalid request ID\n* No result available (see request status for more information)\n* Unable to retrieve the result\n* ...
///
/// @param requestId Request Identifier
/// @param callback Javascript callback function name for JSONP Support
/// 
///
/// @return SystranTranslationFileResponse*
-(NSNumber*) translationFileResultGetWithCompletionBlock :(NSString*) requestId 
     callback:(NSString*) callback 
    
    completionHandler: (void (^)(NSString* output, NSError* error))completionBlock;
    


///
///
/// Translate Status
/// Get the status of an asynchronous translation request\n\nThe translation result is available when the value of the status field is `finished`.\n\nThe translation request is unsuccessful when the value of the status field is `error`.
///
/// @param requestId Request Identifier
/// @param callback Javascript callback function name for JSONP Support
/// 
///
/// @return SystranTranslationStatus*
-(NSNumber*) translationFileStatusGetWithCompletionBlock :(NSString*) requestId 
     callback:(NSString*) callback 
    
    completionHandler: (void (^)(SystranTranslationStatus* output, NSError* error))completionBlock;
    


///
///
/// Translate File
/// Translate a file from source language to target language\n\n\n* In asynchronous mode (async=true), the response will be a JSON containing a request identifier. This identifier can then be used to poll the request status and its result when completed.\n\n  ```\n  {\n     \"requestId\": \"54a3d860e62ea467b136eddb\" /* Request identifier to use to get the status,\n                                                the result of the request and to cancel it */\n     \"error\": {\n       \"message\": \"\" /* Error at request level */\n       \"info\": {}\n     }\n  }\n  ```\n\n* In synchronous mode, the response will be either:\n\n  * The **translated document**, directly, if `source` parameters was not `auto` and `withSource` was not true\n  * A `multipart/mixed` document with the following parts:\n\n    1. **Detected language**, if request was done with `auto` source language\n\n      * Header:\n\n        `part-name: detectedLanguage`\n\n      * Body: JSON document\n        ```\n        {\n          detectedLanguage: \"string\"\n          detectedLanguageConfidence : number\n        }\n        ```\n\n    2. **Source document**, if request was done with `withSource`:\n\n      * Header: `part-name: source`\n      * Body: Source document\n\n    3. **Translated document**\n\n      * Header: `part-name: output`\n\n      * Body: Translated document
///
/// @param input Input file
/// @param target Target language code ([details](#description_langage_code_values))
/// @param source Source language code ([details](#description_langage_code_values)) or `auto`.\n\nWhen the value is set to `auto`, the language will be automatically detected, used to enhance the translation, and returned in output.
/// @param format Format of the source text.\n\nValid values are `text` for plain text, `html` for HTML pages and `auto` for automatic detection.\n\nThe MIME type of file formats supported by SYSTRAN can also be used, the valid types are:\n- application/xhtml+xml\n- application/x-systran-exchange+xml\n- application/x-systran-internal+xml\n- application/x-gettext\n- application/x-tmx+xml\n- application/vnd.android.string-resource+xml\n- application/vnd.jquery.globalize+json\n- application/vnd.microsoft.net.resx+xml\n- application/vnd.openxmlformats\n- application/vnd.oasis.opendocument\n- application/vnd.oasis.opendocument+xml\n- application/vnd.openxmlformats-officedocument.wordprocessingml.document\n- application/vnd.qt.ts+xml\n- application/vnd.systran.document+json\n- application/vnd.systran.i18n+json\n- text/bitext\n- text/html\n- text/plain\n- text/rtf\n- text/x-java-properties\n- xml/xliff\n- xml/xliff2
/// @param profile Profile id
/// @param withSource If `true`, the source will also be sent back in the response message. It can be useful when used with the withAnnotations option to align the source document with the translated document
/// @param withAnnotations If `true`, different annotations will be provided in the translated document. If the option &#39;withSource&#39; is used, the annotations will also be provided in the source document. It will provide segments, tokens, not found words,...
/// @param withDictionary User Dictionary or/and Normalization Dictionary ids to be applied to the translation result. Each dictionary &#39;id&#39; has to be separated by a comma.
/// @param withCorpus Corpus to be applied to the translation result. Each corpus &#39;id&#39; has to be separated by a comma.
/// @param options Additional options.\n\nAn option can be a JSON object containing a set of key/value generic options supported by the translator. It can also be a string with the syntax &#39;&lt;key&gt;:&lt;value&gt;&#39; to pass a key/value generic option to the translator.
/// @param encoding Encoding. `base64` can be useful to send binary documents in the JSON body. Please note that another alternative is to use translateFile
/// @param async If `true`, the translation is performed asynchronously.\n\nThe \&quot;/translation/file/status\&quot; service must be used to wait for the completion of the request and the \&quot;/translation/file/result\&quot; service must be used to get the final result. The \&quot;/translation/file/cancel\&quot; can be used to cancel the request.
/// @param batchId Batch Identifier
/// @param callback Javascript callback function name for JSONP Support
/// 
///
/// @return SystranTranslationFileResponse*
-(NSNumber*) translationFileTranslatePostWithCompletionBlock :(NSURL*) input 
     target:(NSString*) target 
     source:(NSString*) source 
     format:(NSString*) format 
     profile:(NSNumber*) profile 
     withSource:(NSNumber*) withSource 
     withAnnotations:(NSNumber*) withAnnotations 
     withDictionary:(NSString*) withDictionary 
     withCorpus:(NSString*) withCorpus 
     options:(NSArray* /* NSString */) options 
     encoding:(NSString*) encoding 
     async:(NSNumber*) async 
     batchId:(NSString*) batchId 
     callback:(NSString*) callback 
    
    completionHandler: (void (^)(SystranTranslationFileResponse* output, NSError* error))completionBlock;
    


///
///
/// List of profiles
/// List of profiles available for translation.
///
/// @param source Source language code of the profile
/// @param target Target Language code of the profile
/// @param _id Identifier of the profile
/// @param callback Javascript callback function name for JSONP Support
/// 
///
/// @return SystranProfilesResponse*
-(NSNumber*) translationProfileGetWithCompletionBlock :(NSString*) source 
     target:(NSString*) target 
     _id:(NSArray* /* NSNumber */) _id 
     callback:(NSString*) callback 
    
    completionHandler: (void (^)(SystranProfilesResponse* output, NSError* error))completionBlock;
    


///
///
/// Supported Languages
/// List of language pairs in which translation is supported.\n\nThis list can be limited to a specific source language or target language.
///
/// @param source Language code of the source text
/// @param target Language code into which to translate the source text
/// @param callback Javascript callback function name for JSONP Support
/// 
///
/// @return SystranSupportedLanguageResponse*
-(NSNumber*) translationSupportedLanguagesGetWithCompletionBlock :(NSArray* /* NSString */) source 
     target:(NSArray* /* NSString */) target 
     callback:(NSString*) callback 
    
    completionHandler: (void (^)(SystranSupportedLanguageResponse* output, NSError* error))completionBlock;
    


///
///
/// Translate
/// Translate text from source language to target language
///
/// @param input Input text (this parameter can be repeated)
/// @param target Target language code ([details](#description_langage_code_values))
/// @param source Source language code ([details](#description_langage_code_values)) or `auto`.\n\nWhen the value is set to `auto`, the language will be automatically detected, used to enhance the translation, and returned in output.
/// @param format Format of the source text.\n\nValid values are `text` for plain text, `html` for HTML pages and `auto` for automatic detection.\n\nThe MIME type of file formats supported by SYSTRAN can also be used, the valid types are:\n- application/xhtml+xml\n- application/x-systran-exchange+xml\n- application/x-systran-internal+xml\n- application/x-gettext\n- application/x-tmx+xml\n- application/vnd.android.string-resource+xml\n- application/vnd.jquery.globalize+json\n- application/vnd.microsoft.net.resx+xml\n- application/vnd.openxmlformats\n- application/vnd.oasis.opendocument\n- application/vnd.oasis.opendocument+xml\n- application/vnd.openxmlformats-officedocument.wordprocessingml.document\n- application/vnd.qt.ts+xml\n- application/vnd.systran.document+json\n- application/vnd.systran.i18n+json\n- text/bitext\n- text/html\n- text/plain\n- text/rtf\n- text/x-java-properties\n- xml/xliff\n- xml/xliff2
/// @param profile Profile id
/// @param withSource If `true`, the source will also be sent back in the response message. It can be useful when used with the withAnnotations option to align the source document with the translated document
/// @param withAnnotations If `true`, different annotations will be provided in the translated document. If the option &#39;withSource&#39; is used, the annotations will also be provided in the source document. It will provide segments, tokens, not found words,...
/// @param withDictionary User Dictionary or/and Normalization Dictionary ids to be applied to the translation result. Each dictionary &#39;id&#39; has to be separated by a comma.
/// @param withCorpus Corpus to be applied to the translation result. Each corpus &#39;id&#39; has to be separated by a comma.
/// @param backTranslation If `true`, the translated text will be translated back in source language
/// @param options Additional options.\n\nAn option can be a JSON object containing a set of key/value generic options supported by the translator. It can also be a string with the syntax &#39;&lt;key&gt;:&lt;value&gt;&#39; to pass a key/value generic option to the translator.
/// @param encoding Encoding. `base64` can be useful to send binary documents in the JSON body. Please note that another alternative is to use translateFile
/// @param callback Javascript callback function name for JSONP Support
/// 
///
/// @return SystranTranslationResponse*
-(NSNumber*) translationTextTranslatePostWithCompletionBlock :(NSString*) input 
     target:(NSString*) target 
     source:(NSString*) source 
     format:(NSString*) format 
     profile:(NSNumber*) profile 
     withSource:(NSNumber*) withSource 
     withAnnotations:(NSNumber*) withAnnotations 
     withDictionary:(NSString*) withDictionary 
     withCorpus:(NSString*) withCorpus 
     backTranslation:(NSNumber*) backTranslation 
     options:(NSArray* /* NSString */) options 
     encoding:(NSString*) encoding 
     callback:(NSString*) callback 
    
    completionHandler: (void (^)(SystranTranslationResponse* output, NSError* error))completionBlock;
    



@end
